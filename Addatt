import org.w3c.dom.*;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class XMLUpdaterExample {

    public static void main(String[] args) {
        String filePath = "path/to/your/example.xml";
        String parentName = "person";
        int numberOfInstances = 3;

        // Different attributes for each parent instance
        List<String> parentAttributes1 = Arrays.asList("id1", "name1", "age1");
        List<String> parentAttributes2 = Arrays.asList("id2", "name2", "age2");
        List<String> parentAttributes3 = Arrays.asList("id3", "name3", "age3");

        // Child elements and attributes for each parent
        Map<String, List<String>> childElementNames = new HashMap<>();
        childElementNames.put(parentName, Arrays.asList("child1", "child2", "child3"));

        Map<String, Map<String, List<String>>> childElementAttributes = new HashMap<>();

        Map<String, List<String>> child1Attributes = new HashMap<>();
        child1Attributes.put("name", Arrays.asList("John", "Jane", "Bob"));
        child1Attributes.put("age", Arrays.asList("25", "30", "22"));

        Map<String, List<String>> child2Attributes = new HashMap<>();
        child2Attributes.put("name", Arrays.asList("Alice", "Charlie", "David"));
        child2Attributes.put("age", Arrays.asList("28", "35", "19"));

        Map<String, List<String>> child3Attributes = new HashMap<>();
        child3Attributes.put("name", Arrays.asList("Eva", "Frank", "Grace"));
        child3Attributes.put("age", Arrays.asList("33", "27", "40"));

        childElementAttributes.put("child1", child1Attributes);
        childElementAttributes.put("child2", child2Attributes);
        childElementAttributes.put("child3", child3Attributes);

        try {
            File xmlFile = new File(filePath);
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(xmlFile);

            // Create parent elements with different attributes and child elements
            for (int i = 0; i < numberOfInstances; i++) {
                Element parentElement = doc.createElement(parentName);
                List<String> currentParentAttributes;

                // Select the appropriate set of attributes based on the loop iteration
                switch (i) {
                    case 0:
                        currentParentAttributes = parentAttributes1;
                        break;
                    case 1:
                        currentParentAttributes = parentAttributes2;
                        break;
                    case 2:
                        currentParentAttributes = parentAttributes3;
                        break;
                    default:
                        currentParentAttributes = parentAttributes1;
                        break;
                }

                // Set attributes for the parent element
                for (int j = 0; j < currentParentAttributes.size(); j++) {
                    parentElement.setAttribute(currentParentAttributes.get(j), "value" + (j + 1));
                }

                // Create child elements and attributes for each parent
                if (childElementNames.containsKey(parentName)) {
                    List<String> childNames = childElementNames.get(parentName);
                    for (String childName : childNames) {
                        Element childElement = doc.createElement(childName);

                        // Add attributes for child elements
                        if (childElementAttributes.containsKey(childName)) {
                            Map<String, List<String>> attributesMap = childElementAttributes.get(childName);
                            if (attributesMap != null) {
                                for (Map.Entry<String, List<String>> entry : attributesMap.entrySet()) {
                                    String attrName = entry.getKey();
                                    List<String> attrValues = entry.getValue();
                                    if (attrValues != null) {
                                        for (int k = 0; k < attrValues.size(); k++) {
                                            childElement.setAttribute(attrName, attrValues.get(k));
                                        }
                                    }
                                }
                            }
                        }

                        parentElement.appendChild(childElement);
                    }
                }

                // Append the parent element to the root
                doc.getDocumentElement().appendChild(parentElement);
            }

            // Save the changes back to the XML file
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(xmlFile);
            transformer.transform(source, result);

            System.out.println("XML file updated successfully!");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
} 







const mockData = {
  data: {
    data: {
      _55313_exposure_check_plugin: {
        get_outstanding: {
          exposureChecksListResponse: [
            // Your mock response list here
            { id: 1, name: 'mock item' }
          ],
        },
      },
    },
  },
};





import { MyComponent } from './my-component.js'; // Replace with your actual component

describe('MyComponent tests', () => {
  beforeAll(() => {
    // Mock static properties
    Object.defineProperty(MyComponent, 'properties', {
      get: () => ({
        inputLeid: { type: String, state: true },
        inputLocation: { type: String, state: true },
        inputTPXRef: { type: String, state: true },
        inputProductName: { type: String, state: true },
        searchParameters: { type: String, state: true },
        locationsData: { type: Array, state: true },
      }),
    });
  });

  test('should render with mocked static properties', () => {
    const element = new MyComponent();
    element.inputLeid = '12345';
    element.inputLocation = 'New York';
    element.inputTPXRef = 'TPX123';
    element.inputProductName = 'TestProduct';
    element.searchParameters = 'searchTerm';
    element.locationsData = [{ id: 1, name: 'Location 1' }];

    document.body.appendChild(element);

    expect(element.inputLeid).toBe('12345');
    expect(element.inputLocation).toBe('New York');
    expect(element.shadowRoot.querySelector('some-element')).toBeTruthy(); // Replace with actual rendered elements
  });
});






import Util from './Util'; // Adjust the path based on your file structure

describe('Util', () => {
  const graphQLClient = {
    query: jest.fn()
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should log error when fetchData fails', async () => {
    // Mock the GraphQL client's query method to throw an error
    const mockError = new Error('GraphQL query failed');
    graphQLClient.query.mockRejectedValue(mockError);

    // Mock console.log to test if it's called
    console.log = jest.fn();

    // Call the fetchData method
    await Util.fetchData(graphQLClient, 'testQuery');

    // Check if console.log is called with the correct error message
    expect(console.log).toHaveBeenCalledWith('Error in fetchData:', mockError);
  });

});
