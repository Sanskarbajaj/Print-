import { LitElement, html } from 'lit';

class DocViewer extends LitElement {
  static properties = {
    h1: { type: String }, // Header for column 1
    h2: { type: String }, // Header for column 2
    accountTitles: { type: Array }, // First column data
    currencies: { type: Array }, // Second column data
  };

  constructor() {
    super();
    this.h1 = 'Account Title';
    this.h2 = 'Currency';

    // Initialize arrays with uneven lengths
    this.accountTitles = ['John', 'Jane', 'Doe']; // 3 items
    this.currencies = ['USD', 'EUR']; // 2 items
  }

  // Automatically align arrays dynamically
  get alignedAccountTitles() {
    const maxLength = Math.max(this.accountTitles.length, this.currencies.length);
    return [...this.accountTitles, ...Array(maxLength - this.accountTitles.length).fill('')];
  }

  get alignedCurrencies() {
    const maxLength = Math.max(this.accountTitles.length, this.currencies.length);
    return [...this.currencies, ...Array(maxLength - this.currencies.length).fill('')];
  }

  handleAddRow() {
    // Add a new empty row to both arrays
    this.accountTitles = [...this.accountTitles, ''];
    this.currencies = [...this.currencies, ''];
    console.log('Row added:', this.accountTitles, this.currencies);
  }

  handleRemoveRow(e) {
    const index = e.detail.index;
    // Remove the corresponding index from both arrays
    this.accountTitles = this.accountTitles.filter((_, i) => i !== index);
    this.currencies = this.currencies.filter((_, i) => i !== index);
    console.log('Row removed:', this.accountTitles, this.currencies);
  }

  handleUpdateCell(e) {
    const { index, field, value } = e.detail;

    if (field === 'accountTitles') {
      this.accountTitles = this.accountTitles.map((item, i) =>
        i === index ? value : item
      );
    } else if (field === 'currencies') {
      this.currencies = this.currencies.map((item, i) =>
        i === index ? value : item
      );
    }

    console.log('Updated data:', { accountTitles: this.accountTitles, currencies: this.currencies });
  }

  render() {
    return html`
      <account-table
        .h1=${this.h1}
        .h2=${this.h2}
        .array1=${this.alignedAccountTitles} <!-- Dynamically aligned accountTitles -->
        .array2=${this.alignedCurrencies} <!-- Dynamically aligned currencies -->
        @add-row=${this.handleAddRow}
        @remove-row=${this.handleRemoveRow}
        @update-cell=${this.handleUpdateCell}
      ></account-table>
    `;
  }
}

customElements.define('doc-viewer', DocViewer);
