import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class JsonReader {

    public static void main(String[] args) {
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            // Parse the JSON file
            Map<String, Object> jsonData = objectMapper.readValue(new File("test.json"), new TypeReference<Map<String, Object>>() {});

            // Read version, target
            String version = jsonData.get("version").toString();
            String target = jsonData.get("target").toString();

            // Output version and target to confirm
            System.out.println("Version: " + version);
            System.out.println("Target: " + target);

            // Read instances
            List<Map<String, Object>> instances = (List<Map<String, Object>>) jsonData.get("instances");

            // Loop through instances sequentially
            for (Map<String, Object> instance : instances) {
                System.out.println("Processing new instance...");

                // Read the JDBC information for the current instance
                String jdbcUrl = instance.get("jdbc_url").toString();
                String username = instance.get("username").toString();
                String password = instance.get("password").toString();
                String deploymentTaskCount = instance.get("deploymentTaskCount").toString();
                String sqlCommandTimeout = instance.get("sqlCommandTimeout").toString();

                // Create a thread pool with a fixed number of threads
                ThreadPoolExecutor executorPool = (ThreadPoolExecutor) Executors.newFixedThreadPool(10);
                int taskCount = Integer.parseInt(deploymentTaskCount);
                int timeout = Integer.parseInt(sqlCommandTimeout);

                // Create tasks for each enumeration item to connect to the DB schema in parallel
                List<Map<String, String>> enumerations = (List<Map<String, String>>) instance.get("enumeration");
                for (Map<String, String> enumItem : enumerations) {
                    String schemaName = enumItem.get("name");

                    executorPool.execute(() -> {
                        try {
                            connectToDatabase(jdbcUrl, username, password, schemaName);
                        } catch (Exception e) {
                            System.err.println("Failed to connect to schema: " + schemaName + " in instance: " + jdbcUrl);
                            e.printStackTrace();
                        }
                    });
                }

                // Shutdown the ExecutorService after submitting all tasks
                executorPool.shutdown();
                try {
                    if (!executorPool.awaitTermination(timeout, TimeUnit.SECONDS)) {
                        executorPool.shutdownNow();
                    }
                } catch (InterruptedException e) {
                    executorPool.shutdownNow();
                    Thread.currentThread().interrupt();
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to connect to the database with a specific schema
    public static void connectToDatabase(String jdbcUrl, String username, String password, String schemaName) throws Exception {
        // Append the schema to the JDBC URL if needed for the specific database
        String connectionUrl = jdbcUrl + ";currentSchema=" + schemaName;

        // Try to establish a connection
        try (Connection connection = DriverManager.getConnection(connectionUrl, username, password)) {
            connection.setSchema(schemaName);
            System.out.println("Connected to schema: " + schemaName + " using thread: " + Thread.currentThread().getName());
        } catch (SQLException e) {
            throw e;
        }
    }
}
