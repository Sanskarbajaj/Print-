import { LitElement, html, css } from 'lit';

class DownloadFile extends LitElement {
  static styles = css`
    button {
      padding: 10px 20px;
      font-size: 16px;
      background-color: #4caf50;
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 5px;
    }
    button:hover {
      background-color: #45a049;
    }
  `;

  // Simulated binary response as a JSON object
  getBinaryResponse() {
    return {
      file: {
        type: 'Buffer',
        filename: 'sample.doc',
        data: [
          84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 97, 109, 112, 108,
          101, 32, 46, 100, 111, 99, 32, 102, 105, 108, 101, 32, 99, 114, 101,
          97, 116, 101, 100, 32, 102, 111, 114, 32, 116, 101, 115, 116, 105,
          110, 103, 46,
        ], // Example binary data for .doc content
        mime_type: 'application/msword',
      },
    };
  }

  // Method to trigger the file download
  downloadFile() {
    const binaryResponse = this.getBinaryResponse();
    const { data, filename, mime_type } = binaryResponse.file;

    // Convert the data array back to a Uint8Array
    const binaryData = new Uint8Array(data);

    // Create a Blob from the binary data
    const blob = new Blob([binaryData], { type: mime_type });

    // Create a temporary link to trigger download
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();

    // Clean up the object URL
    URL.revokeObjectURL(link.href);
  }

  render() {
    return html`
      <button @click="${this.downloadFile}">Download File</button>
    `;
  }
}

// Register the custom element
customElements.define('download-file', DownloadFile);
