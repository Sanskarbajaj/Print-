gradle.beforeProject { project ->
    if (project == project.rootProject) {
        project.allprojects {
            plugins.withType(ResolutionRulesPlugin) {
                rules.addDependencyConvergenceRule("dependencyConvergence", { DependencyConvergence.allVariants() })
            }
        }
    }
}

tasks.register('dependencyConvergence', DependencyConvergenceReportTask) {
    outputFile = file("$buildDir/reports/dependency-convergence/report.txt")
}









gradle.beforeProject { project ->
    if (project == project.rootProject) {
        project.subprojects {
            plugins.withType(ResolutionRulesPlugin) {
                rules.addDependencyConvergenceRule("dependencyConvergence", { DependencyConvergence.allVariants() })
            }
        }
    }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(":dependencyConvergence")) {
        tasks.dependencyConvergence.execute()
    }
}

tasks.register('dependencyConvergence', DependencyConvergenceReportTask) {
    outputFile = file("$buildDir/reports/dependency-convergence/report.txt")
}












gradle.projectsEvaluated {
    tasks.register('dependencyConvergence', DependencyConvergenceReportTask) {
        outputFile = file("$buildDir/reports/dependency-convergence/report.txt")
    }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(":dependencyConvergence")) {
        tasks.dependencyConvergence.execute()
    }
}
