import { html, fixture, assert } from '@open-wc/testing';
import { MyComponent } from '../path/to/your-component.js'; // replace with the path to your component

describe('loadExposures function', () => {
  let component;

  beforeEach(async () => {
    component = await fixture(html`<my-component></my-component>`);
  });

  it('should set isEmptyRow to true if exposureRequestJson length is 0', () => {
    component.exposureRequestJson = []; // Set an empty array
    component.loadExposures();
    assert.isTrue(component.isEmptyRow);
  });

  it('should set isEmptyRow to false if exposureRequestJson has items', () => {
    component.exposureRequestJson = [{ id: 1 }]; // Set a non-empty array
    component.loadExposures();
    assert.isFalse(component.isEmptyRow);
  });

  it('should store exposureRequestJson in sessionStorage', () => {
    const jsonData = [{ id: 1 }];
    component.exposureRequestJson = jsonData;
    component.loadExposures();
    
    const storedData = JSON.parse(sessionStorage.getItem('exposureRequestJson'));
    expect(storedData).toEqual(jsonData);
  });

  it('should navigate to "exposure" page', () => {
    const navigateSpy = jest.spyOn(component.navigation, 'go'); // Mock the navigation function
    component.loadExposures();
    
    expect(navigateSpy).toHaveBeenCalledWith('exposure');
    navigateSpy.mockRestore();
  });
});
















import { html, fixture, assert } from '@open-wc/testing';
import { MyComponent } from '../path/to/your-component.js'; // replace with the path to your component

describe('loadExposures function', () => {
  let component;

  beforeEach(async () => {
    component = await fixture(html`<my-component></my-component>`);
    
    // Mock _navigationContextConsumer.value to provide a navigation object
    component._navigationContextConsumer = {
      value: {
        go: jest.fn(), // Mock `go` method
      },
    };
  });

  it('should set isEmptyRow to true if exposureRequestJson length is 0', () => {
    component.exposureRequestJson = []; // Set an empty array
    component.loadExposures();
    assert.isTrue(component.isEmptyRow);
  });

  it('should set isEmptyRow to false if exposureRequestJson has items', () => {
    component.exposureRequestJson = [{ id: 1 }]; // Set a non-empty array
    component.loadExposures();
    assert.isFalse(component.isEmptyRow);
  });

  it('should store exposureRequestJson in sessionStorage', () => {
    const jsonData = [{ id: 1 }];
    component.exposureRequestJson = jsonData;
    component.loadExposures();
    
    const storedData = JSON.parse(sessionStorage.getItem('exposureRequestJson'));
    expect(storedData).toEqual(jsonData);
  });

  it('should navigate to "exposure" page', () => {
    component.loadExposures();
    
    // Check if the navigation `go` method was called with 'exposure'
    expect(component._navigationContextConsumer.value.go).toHaveBeenCalledWith('exposure');
  });
});













import { html, fixture, assert } from '@open-wc/testing';
import { MyComponent } from '../path/to/your-component.js'; // replace with the path to your component

describe('handleSelectAllTabLevelData function', () => {
  let component;

  beforeEach(async () => {
    component = await fixture(html`<my-component></my-component>`);
    component.exposureRequestJson = [];
  });

  it('should add data to exposureRequestJson if selectedTab is "location" or "branches"', () => {
    // Mock event data
    const mockEvent = {
      detail: {
        selectedSubTableData: {
          key1: {
            bkgLocationCountry: 'US/',
            externalSystemCode: 'SYS1',
            externalSystemID: 'ID123',
            externalSystemAccStatus: 'Active',
            externalSystemCustName: 'Customer1'
          }
        }
      }
    };
    component.selectedTab = 'location';
    component.inputLeid = 'LE123';
    
    component.handleSelectAllTabLevelData(mockEvent);
    
    // Check if exposureRequestJson has been populated correctly
    expect(component.exposureRequestJson).toEqual([
      {
        legalEntityId: 'LE123',
        fmAId: 'ID123',
        countryCode: 'US',
        productName: 'SYS1',
        tpSystemName: 'ID123',
        tpAccountStatus: 'Active',
        customerName: 'Customer1'
      }
    ]);
  });

  it('should add data to exposureRequestJson if selectedTab is "fmaccounts"', () => {
    // Mock event data
    const mockEvent = {
      detail: {
        selectedSubTableData: {
          key2: {
            externalSystemCode: 'SYS2',
            externalSystemID: 'ID456',
            externalSystemAccStatus: 'Inactive',
            externalSystemCustName: 'Customer2'
          }
        }
      }
    };
    component.selectedTab = 'fmaccounts';
    component.inputLeid = 'LE456';
    
    component.handleSelectAllTabLevelData(mockEvent);
    
    // Check if exposureRequestJson has been populated correctly
    expect(component.exposureRequestJson).toEqual([
      {
        legalEntityId: 'LE456',
        fmAId: 'ID456',
        productName: 'SYS2',
        tpSystemName: 'ID456',
        tpAccountStatus: 'Inactive',
        customerName: 'Customer2'
      }
    ]);
  });

  it('should not add data if selectedSubTableData is null', () => {
    const mockEvent = {
      detail: {
        selectedSubTableData: null
      }
    };
    component.handleSelectAllTabLevelData(mockEvent);

    // Check that exposureRequestJson remains empty
    expect(component.exposureRequestJson).toEqual([]);
  });
});
