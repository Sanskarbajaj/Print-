package com.scb.oaf.web.util;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.rmi.PortableRemoteObject;

import java.util.Hashtable;
import java.util.ResourceBundle;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class SCBServiceLocatorTest {

    @BeforeEach
    void resetSingleton() throws Exception {
        // Clear singleton instance for isolation
        var field = SCBServiceLocator.class.getDeclaredField("serviceLocator");
        field.setAccessible(true);
        field.set(null, null);
    }

    @Test
    public void testGetInstance_shouldReturnSingleton() throws Exception {
        ResourceBundle bundle = mock(ResourceBundle.class);
        when(bundle.getObject("TP_APPSERVER_INSTANCE_ADDRESS")).thenReturn("host");
        when(bundle.getObject("TP_PROVIDER_URL")).thenReturn("providerUrl");
        when(bundle.getObject("TP_CONTEXT_FACTORY")).thenReturn("contextFactory");

        InitialContext mockContext = mock(InitialContext.class);

        try (
            MockedStatic<ResourceBundle> staticBundle = mockStatic(ResourceBundle.class);
            MockedStatic<InitialContext> staticContext = mockStatic(InitialContext.class)
        ) {
            staticBundle.when(() -> ResourceBundle.getBundle(anyString())).thenReturn(bundle);
            staticContext.when(() -> new InitialContext(any(Hashtable.class))).thenReturn(mockContext);

            SCBServiceLocator instance = SCBServiceLocator.getInstance();
            assertNotNull(instance);
        }
    }

    @Test
    public void testGetObjectReference_withClass() throws Exception {
        InitialContext context = mock(InitialContext.class);
        Object ejb = new Object();
        when(context.lookup("Dummy")).thenReturn(ejb);

        try (
            MockedStatic<InitialContext> staticContext = mockStatic(InitialContext.class);
            MockedStatic<ResourceBundle> staticBundle = mockStatic(ResourceBundle.class);
            MockedStatic<PortableRemoteObject> remoteMock = mockStatic(PortableRemoteObject.class)
        ) {
            ResourceBundle dummyBundle = mock(ResourceBundle.class);
            when(dummyBundle.getObject(anyString())).thenReturn("abc");
            staticBundle.when(() -> ResourceBundle.getBundle(anyString())).thenReturn(dummyBundle);

            staticContext.when(() -> new InitialContext(any())).thenReturn(context);
            remoteMock.when(() -> PortableRemoteObject.narrow(any(), eq(EJBHome.class))).thenReturn(mock(EJBHome.class));

            SCBServiceLocator locator = SCBServiceLocator.getInstance();
            EJBHome ref = locator.getObjectReference(DummyEJB.class);
            assertNotNull(ref);
        }
    }

    @Test
    public void testGetObjectReference_withJNDIName() throws Exception {
        InitialContext context = mock(InitialContext.class);
        Object ejb = new Object();
        when(context.lookup("myJNDI")).thenReturn(ejb);

        try (
            MockedStatic<InitialContext> staticContext = mockStatic(InitialContext.class);
            MockedStatic<ResourceBundle> staticBundle = mockStatic(ResourceBundle.class);
            MockedStatic<PortableRemoteObject> remoteMock = mockStatic(PortableRemoteObject.class)
        ) {
            ResourceBundle dummyBundle = mock(ResourceBundle.class);
            when(dummyBundle.getObject(anyString())).thenReturn("abc");
            staticBundle.when(() -> ResourceBundle.getBundle(anyString())).thenReturn(dummyBundle);

            staticContext.when(() -> new InitialContext(any())).thenReturn(context);
            remoteMock.when(() -> PortableRemoteObject.narrow(any(), eq(EJBHome.class))).thenReturn(mock(EJBHome.class));

            SCBServiceLocator locator = SCBServiceLocator.getInstance();
            EJBHome ref = locator.getObjectReference("myJNDI", DummyEJB.class);
            assertNotNull(ref);
        }
    }

    // Dummy EJB class for mocking
    interface DummyEJB extends EJBHome {}
}
