package com.scb.oaf.web.util;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.rmi.PortableRemoteObject;
import javax.ejb.EJBHome;

import java.util.Hashtable;
import java.util.ResourceBundle;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class SCBServiceLocatorTest {

    @BeforeEach
    void resetSingleton() throws Exception {
        var field = SCBServiceLocator.class.getDeclaredField("serviceLocator");
        field.setAccessible(true);
        field.set(null, null);
    }

    @Test
    void testGetInstance_returnsInstance() throws Exception {
        ResourceBundle mockBundle = mock(ResourceBundle.class);
        InitialContext mockContext = mock(InitialContext.class);

        when(mockBundle.getObject("TP_APPSERVER_INSTANCE_ADDRESS")).thenReturn("localhost");
        when(mockBundle.getObject("TP_PROVIDER_URL")).thenReturn("t3://localhost:7001");
        when(mockBundle.getObject("TP_CONTEXT_FACTORY")).thenReturn("com.sun.jndi.fscontext.RefFSContextFactory");

        try (
            MockedStatic<ResourceBundle> bundleStatic = Mockito.mockStatic(ResourceBundle.class);
            MockedStatic<InitialContext> contextStatic = Mockito.mockStatic(InitialContext.class)
        ) {
            bundleStatic.when(() -> ResourceBundle.getBundle("SRV_WEB")).thenReturn(mockBundle);
            contextStatic.when(() -> new InitialContext(any(Hashtable.class))).thenReturn(mockContext);

            SCBServiceLocator locator = SCBServiceLocator.getInstance();
            assertNotNull(locator);
        }
    }

    @Test
    void testGetObjectReferenceByClass_returnsEJBHome() throws Exception {
        InitialContext mockContext = mock(InitialContext.class);
        Object ejbObject = new Object();
        EJBHome mockEJBHome = mock(EJBHome.class);

        when(mockContext.lookup("DummyClass")).thenReturn(ejbObject);

        try (
            MockedStatic<ResourceBundle> bundleStatic = Mockito.mockStatic(ResourceBundle.class);
            MockedStatic<InitialContext> contextStatic = Mockito.mockStatic(InitialContext.class);
            MockedStatic<PortableRemoteObject> remoteObject = Mockito.mockStatic(PortableRemoteObject.class)
        ) {
            ResourceBundle mockBundle = mock(ResourceBundle.class);
            when(mockBundle.getObject(anyString())).thenReturn("dummy");
            bundleStatic.when(() -> ResourceBundle.getBundle(anyString())).thenReturn(mockBundle);

            contextStatic.when(() -> new InitialContext(any(Hashtable.class))).thenReturn(mockContext);
            remoteObject.when(() -> PortableRemoteObject.narrow(ejbObject, DummyHome.class)).thenReturn(mockEJBHome);

            SCBServiceLocator locator = SCBServiceLocator.getInstance();
            EJBHome result = locator.getObjectReference(DummyHome.class);
            assertNotNull(result);
        }
    }

    @Test
    void testGetObjectReferenceByName_returnsEJBHome() throws Exception {
        InitialContext mockContext = mock(InitialContext.class);
        Object ejbObject = new Object();
        EJBHome mockEJBHome = mock(EJBHome.class);

        when(mockContext.lookup("jndi/SomeBean")).thenReturn(ejbObject);

        try (
            MockedStatic<ResourceBundle> bundleStatic = Mockito.mockStatic(ResourceBundle.class);
            MockedStatic<InitialContext> contextStatic = Mockito.mockStatic(InitialContext.class);
            MockedStatic<PortableRemoteObject> remoteObject = Mockito.mockStatic(PortableRemoteObject.class)
        ) {
            ResourceBundle mockBundle = mock(ResourceBundle.class);
            when(mockBundle.getObject(anyString())).thenReturn("dummy");
            bundleStatic.when(() -> ResourceBundle.getBundle(anyString())).thenReturn(mockBundle);

            contextStatic.when(() -> new InitialContext(any(Hashtable.class))).thenReturn(mockContext);
            remoteObject.when(() -> PortableRemoteObject.narrow(ejbObject, DummyHome.class)).thenReturn(mockEJBHome);

            SCBServiceLocator locator = SCBServiceLocator.getInstance();
            EJBHome result = locator.getObjectReference("jndi/SomeBean", DummyHome.class);
            assertNotNull(result);
        }
    }

    interface DummyHome extends EJBHome {}
}
