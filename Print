import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import java.io.IOException;

public class HideTextInImage {

    public static void main(String[] args) {
        try {
            // Load the image
            BufferedImage image = ImageIO.read(new File("original_image.png"));

            // Text to hide
            String textToHide = "This is a hidden message";

            // Encode and hide the text in the image
            hideTextInImage(image, textToHide);

            // Save the modified image with the hidden text
            File outputImage = new File("image_with_hidden_text.png");
            ImageIO.write(image, "png", outputImage);

            System.out.println("Text hidden in the image.");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void hideTextInImage(BufferedImage image, String text) {
        int width = image.getWidth();
        int height = image.getHeight();
        int textLength = text.length();
        int textIndex = 0;

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                if (textIndex < textLength) {
                    int pixel = image.getRGB(x, y);
                    int alpha = (pixel >> 24) & 0xFF;
                    int red = (pixel >> 16) & 0xFF;
                    int green = (pixel >> 8) & 0xFF;
                    int blue = pixel & 0xFF;

                    char currentChar = text.charAt(textIndex);
                    int charValue = (int) currentChar;

                    // Hide the character in the least significant bits of the RGB channels
                    red = (red & 0xFE) | ((charValue >> 7) & 1);
                    green = (green & 0xFE) | ((charValue >> 6) & 1);
                    blue = (blue & 0xFE) | ((charValue >> 5) & 1);

                    pixel = (alpha << 24) | (red << 16) | (green << 8) | blue;
                    image.setRGB(x, y, pixel);

                    textIndex++;
                }
            }
        }
    }
}

import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import java.io.IOException;

public class ReadTextFromImage {

    public static void main(String[] args) {
        try {
            // Load the image with hidden text
            BufferedImage image = ImageIO.read(new File("image_with_hidden_text.png"));

            // Extract and print the hidden text
            String hiddenText = extractTextFromImage(image);
            System.out.println("Hidden text: " + hiddenText);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String extractTextFromImage(BufferedImage image) {
        int width = image.getWidth();
        int height = image.getHeight();
        StringBuilder textBuilder = new StringBuilder();
        int charValue = 0;
        int charIndex = 0;

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = image.getRGB(x, y);
                int blue = pixel & 0x03; // Extract the last 2 bits from the blue channel

                charValue = (charValue << 2) | blue;
                charIndex += 2;

                if (charIndex >= 8) {
                    textBuilder.append((char) charValue);
                    charValue = 0;
                    charIndex = 0;
                }
            }
        }

        return textBuilder.toString();
    }
}
