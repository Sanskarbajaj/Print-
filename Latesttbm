import { LitElement, html, css } from 'lit';

export class TextBoxManager extends LitElement {
  static properties = {
    contacts: { type: Array }, // Array of contact strings passed from parent
  };

  static styles = css`
    /* Your existing styles remain untouched */
  `;

  handleAdd() {
    this.dispatchEvent(new CustomEvent('add-contact', { bubbles: true, composed: true }));
  }

  handleRemove(index) {
    this.dispatchEvent(
      new CustomEvent('remove-contact', {
        detail: { index },
        bubbles: true,
        composed: true,
      })
    );
  }

  handleUpdate(index, value) {
    this.dispatchEvent(
      new CustomEvent('update-contact', {
        detail: { index, value },
        bubbles: true,
        composed: true,
      })
    );
  }

  render() {
    return html`
      <div id="contacts-container">
        ${this.contacts.map(
          (contact, index) => html`
            <div class="contact-box">
              <input
                type="text"
                .value=${contact}
                @input=${(e) => this.handleUpdate(index, e.target.value)}
              />
              <button @click=${this.handleAdd}>+</button>
              ${index > 0
                ? html`<button @click=${() => this.handleRemove(index)}>-</button>`
                : ''}
            </div>
          `
        )}
      </div>
    `;
  }
}

customElements.define('textbox-manager', TextBoxManager);




import { LitElement, html } from 'lit';

class DocViewer extends LitElement {
  static properties = {
    contacts: { type: Array }, // Array of contact strings
  };

  constructor() {
    super();
    this.contacts = ['John', 'Jane', 'Doe']; // Initial contacts (comma-separated string is converted to an array manually here)
  }

  handleAddContact() {
    this.contacts = [...this.contacts, '']; // Add a new empty contact
    console.log('Added new contact:', this.contacts);
  }

  handleRemoveContact(e) {
    const index = e.detail.index;
    this.contacts = this.contacts.filter((_, i) => i !== index);
    console.log('Removed contact at index', index, ':', this.contacts);
  }

  handleUpdateContact(e) {
    const { index, value } = e.detail;
    this.contacts = this.contacts.map((contact, i) => (i === index ? value : contact));
    console.log('Updated contact:', this.contacts);
  }

  render() {
    return html`
      <textbox-manager
        .contacts=${this.contacts}
        @add-contact=${this.handleAddContact}
        @remove-contact=${this.handleRemoveContact}
        @update-contact=${this.handleUpdateContact}
      ></textbox-manager>
    `;
  }
}

customElements.define('doc-viewer', DocViewer);



import { LitElement, html, css } from 'lit';

export class TextBoxManager extends LitElement {
  static properties = {
    contacts: { type: Array }, // Array of contact strings passed from parent
    localContacts: { type: Array }, // Internal copy for immediate updates
  };

  constructor() {
    super();
    this.contacts = [];
    this.localContacts = [];
  }

  willUpdate(changedProperties) {
    if (changedProperties.has('contacts')) {
      // Sync localContacts with the latest contacts from the parent
      this.localContacts = [...this.contacts];
    }
  }

  handleAdd() {
    this.dispatchEvent(new CustomEvent('add-contact', { bubbles: true, composed: true }));
  }

  handleRemove(index) {
    this.dispatchEvent(
      new CustomEvent('remove-contact', {
        detail: { index },
        bubbles: true,
        composed: true,
      })
    );
  }

  handleUpdate(index, value) {
    // Update localContacts for immediate feedback
    this.localContacts = this.localContacts.map((contact, i) =>
      i === index ? value : contact
    );

    // Dispatch update to the parent
    this.dispatchEvent(
      new CustomEvent('update-contact', {
        detail: { index, value },
        bubbles: true,
        composed: true,
      })
    );
  }

  render() {
    return html`
      <div id="contacts-container">
        ${this.localContacts.map(
          (contact, index) => html`
            <div class="contact-box">
              <input
                type="text"
                .value=${contact}
                @input=${(e) => this.handleUpdate(index, e.target.value)}
              />
              <button @click=${this.handleAdd}>+</button>
              ${index > 0
                ? html`<button @click=${() => this.handleRemove(index)}>-</button>`
                : ''}
            </div>
          `
        )}
      </div>
    `;
  }
}

customElements.define('textbox-manager', TextBoxManager);



