import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import javax.inject.Inject;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import java.util.ArrayList;
import java.util.List;

@QuarkusTest
public class TradeQueryServiceTest {

    @InjectMocks
    TradeQueryService tradeQueryService;

    @Mock
    DevkitTradeFinanceApiClient tradeClient;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetCorporateLimits() {
        // Setup mock data
        String countryCode = "US";
        String custId = "123";

        TradeCorporateLimit mockLimit = new TradeCorporateLimit();
        mockLimit.setCorporateLimitDetails(new ArrayList<>());
        when(tradeClient.getCorporateLimits(countryCode, custId)).thenReturn(mockLimit);

        // Execute the method under test
        List<TradeCorporateLimitItem> result = tradeQueryService.getCorporateLimits(countryCode, custId);

        // Verify the results
        assertNotNull(result);
        verify(tradeClient, times(1)).getCorporateLimits(countryCode, custId);
        assertTrue(result.isEmpty());
    }

    @Test
    public void testGetBankLimits() {
        // Setup mock data
        String bankId = "456";

        TradeBankLimit mockBankLimit = new TradeBankLimit();
        mockBankLimit.setBankLimitDetails(new ArrayList<>());
        when(tradeClient.getBankLimits(bankId)).thenReturn(mockBankLimit);

        // Execute the method under test
        List<TradeBankLimitItem> result = tradeQueryService.getBankLimits(bankId);

        // Verify the results
        assertNotNull(result);
        verify(tradeClient, times(1)).getBankLimits(bankId);
        assertTrue(result.isEmpty());
    }
}










@Test
public void testGetCorporateLimits() {
    // Setup mock data for countryCode and custId
    String countryCode = "US"; // You can change this to any valid country code your service expects
    String custId = "123";     // Mock customer ID

    // Create mock corporate limit details
    TradeCorporateLimit.CorporateLimitDetail mockDetail = new TradeCorporateLimit.CorporateLimitDetail();
    // Set necessary properties for the mockDetail (e.g., limits, details, etc.)
    
    List<TradeCorporateLimit.CorporateLimitDetail> mockDetails = new ArrayList<>();
    mockDetails.add(mockDetail);

    // Create the mock TradeCorporateLimit object and set the details
    TradeCorporateLimit mockLimit = new TradeCorporateLimit();
    mockLimit.setCorporateLimitDetails(mockDetails);

    // Mock the behavior of the trade client to return the mock corporate limit
    when(tradeClient.getCorporateLimits(countryCode, custId)).thenReturn(mockLimit);

    // Execute the method under test
    List<TradeCorporateLimitItem> result = tradeQueryService.getCorporateLimits(countryCode, custId);

    // Verify the results
    assertNotNull(result);
    verify(tradeClient, times(1)).getCorporateLimits(countryCode, custId);
    assertEquals(1, result.size()); // Make sure the list has one item (as we added only one mockDetail)
}








import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

@QuarkusTest
public class TradeQueryServiceTest {

    @InjectMocks
    TradeQueryService tradeQueryService;

    @Mock
    DevkitTradeFinanceApiClient tradeClient;

    @Test
    public void testGetCorporateLimits() {
        // Setup mock data
        String countryCode = "US";
        String custId = "123";

        // Mock the details and limit objects
        TradeCorporateLimit.CorporateLimitDetail mockDetail = mock(TradeCorporateLimit.CorporateLimitDetail.class);
        List<TradeCorporateLimit.CorporateLimitDetail> mockDetails = new ArrayList<>();
        mockDetails.add(mockDetail);

        TradeCorporateLimit mockLimit = mock(TradeCorporateLimit.class);
        when(mockLimit.corporateLimitDetails()).thenReturn(mockDetails);

        // Mock the behavior of tradeClient to return the mock limit
        when(tradeClient.getCorporateLimits(countryCode, custId)).thenReturn(mockLimit);

        // Call the method under test
        List<TradeCorporateLimitItem> result = tradeQueryService.getCorporateLimits(countryCode, custId);

        // Basic assertions
        assertNotNull(result);
        assertEquals(1, result.size()); // Should return one item

        // Verify that the tradeClient's method was called once
        verify(tradeClient, times(1)).getCorporateLimits(countryCode, custId);
    }
}










import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

@QuarkusTest
public class TradeQueryServiceTest {

    // The class under test
    TradeQueryService tradeQueryService;

    // Mocked dependency
    @Mock
    DevkitTradeFinanceApiClient tradeClient;

    @BeforeEach
    public void setUp() {
        // Initialize mocks
        MockitoAnnotations.openMocks(this);

        // Manually inject the mock into the service
        tradeQueryService = new TradeQueryService();
        tradeQueryService.tradeClient = tradeClient;  // Manually set the mock
    }

    @Test
    public void testGetCorporateLimits() {
        // Setup mock data
        String countryCode = "US";
        String custId = "123";

        // Mock the details and limit objects
        TradeCorporateLimit.CorporateLimitDetail mockDetail = mock(TradeCorporateLimit.CorporateLimitDetail.class);
        List<TradeCorporateLimit.CorporateLimitDetail> mockDetails = new ArrayList<>();
        mockDetails.add(mockDetail);

        TradeCorporateLimit mockLimit = mock(TradeCorporateLimit.class);
        when(mockLimit.corporateLimitDetails()).thenReturn(mockDetails);

        // Mock the behavior of tradeClient to return the mock limit
        when(tradeClient.getCorporateLimits(countryCode, custId)).thenReturn(mockLimit);

        // Call the method under test
        List<TradeCorporateLimitItem> result = tradeQueryService.getCorporateLimits(countryCode, custId);

        // Basic assertions
        assertNotNull(result);
        assertEquals(1, result.size()); // Should return one item

        // Verify that the tradeClient's method was called once
        verify(tradeClient, times(1)).getCorporateLimits(countryCode, custId);
    }
}












import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class TradeQueryServiceTest {

    private TradeQueryService tradeQueryService;

    @Mock
    private DevkitTradeFinanceApiClient tradeClient;

    @BeforeEach
    public void setUp() {
        // Initialize Mockito annotations
        MockitoAnnotations.openMocks(this);

        // Create a new instance of TradeQueryService
        tradeQueryService = new TradeQueryService();
        
        // Manually inject the mock tradeClient
        tradeQueryService.tradeClient = tradeClient;
    }

    @Test
    public void testGetCorporateLimits() {
        // Arrange
        String countryCode = "US";
        String custId = "123";
        
        // Create a mock CorporateLimitDetail and list
        TradeCorporateLimit.CorporateLimitDetail mockDetail = mock(TradeCorporateLimit.CorporateLimitDetail.class);
        List<TradeCorporateLimit.CorporateLimitDetail> mockDetails = new ArrayList<>();
        mockDetails.add(mockDetail);

        // Mock the TradeCorporateLimit object
        TradeCorporateLimit mockLimit = mock(TradeCorporateLimit.class);
        when(mockLimit.corporateLimitDetails()).thenReturn(mockDetails);

        // Set up the tradeClient mock to return the mock limit
        when(tradeClient.getCorporateLimits(countryCode, custId)).thenReturn(mockLimit);

        // Act
        List<TradeCorporateLimitItem> result = tradeQueryService.getCorporateLimits(countryCode, custId);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size()); // The result should have one item
        verify(tradeClient, times(1)).getCorporateLimits(countryCode, custId); // Verify the tradeClient was called
    }

    @Test
    public void testGetBankLimits() {
        // Arrange
        String bankId = "ABC123";
        
        // Create a mock BankLimitDetail and list
        TradeBankLimit.BankLimitDetail mockBankDetail = mock(TradeBankLimit.BankLimitDetail.class);
        List<TradeBankLimit.BankLimitDetail> mockBankDetails = new ArrayList<>();
        mockBankDetails.add(mockBankDetail);

        // Mock the TradeBankLimit object
        TradeBankLimit mockBankLimit = mock(TradeBankLimit.class);
        when(mockBankLimit.bankLimitDetails()).thenReturn(mockBankDetails);

        // Set up the tradeClient mock to return the mock bank limits
        when(tradeClient.getBankLimits(bankId)).thenReturn(mockBankLimit);

        // Act
        List<TradeBankLimitItem> result = tradeQueryService.getBankLimits(bankId);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size()); // The result should have one item
        verify(tradeClient, times(1)).getBankLimits(bankId); // Verify the tradeClient was called
    }
}
