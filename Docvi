import { LitElement, html, css } from 'lit';

class DocumentHighlighter extends LitElement {
  static properties = {
    imageData: { type: String }, // Base64 image data
    selections: { type: Array } // Full list of selection regions
  };

  constructor() {
    super();
    this.imageData = '...'; // Replace with your base64 image data
    this.selections = [
      { type: 'name', xmin: 10, xmax: 50, ymin: 20, ymax: 60 },
      { type: 'address', xmin: 60, xmax: 100, ymin: 70, ymax: 120 }
    ];
    this.currentSelection = []; // Current selection for highlighting
  }

  // Update the selection based on clicked field type
  updateSelection(fieldType) {
    this.currentSelection = this.selections.filter(sel => sel.type === fieldType);
    this.requestUpdate();
  }

  render() {
    return html`
      <div class="container">
        <div class="viewer">
          <!-- Doc viewer component with dynamic selection based on currentSelection -->
          <doc-viewer
            .data="${this.imageData}"
            .selection="${this.currentSelection}">
          </doc-viewer>
        </div>
        
        <div class="fields">
          <!-- Textboxes with click events to update the selection in doc viewer -->
          <label>Name:
            <input type="text" id="nameTextbox" @click="${() => this.updateSelection('name')}" />
          </label>
          <label>Address:
            <input type="text" id="addressTextbox" @click="${() => this.updateSelection('address')}" />
          </label>
        </div>
      </div>
    `;
  }

  static styles = css`
    .container {
      display: flex;
      flex-direction: row;
    }
    .viewer {
      flex: 1;
      margin-right: 20px;
    }
    .fields {
      display: flex;
      flex-direction: column;
    }
    label {
      margin-bottom: 10px;
    }
  `;
}

customElements.define('document-highlighter', DocumentHighlighter);
