[
    { property: "case_id", header: "Case ID" },
    { property: "client_leid", header: "Client LEID" },
    { property: "client_name", header: "Client Name" },
    { property: "requested_by", header: "Requested By" },
    { property: "created_on", header: "Created On" },
    { property: "status", header: "Status" }
] 
[
    {
        case_id: "C12345",
        client_leid: "L56789",
        client_name: "John Doe",
        requested_by: "Jane Smith",
        created_on: "2024-07-07",
        status: "Open"
    },
    {
        case_id: "C12346",
        client_leid: "L56790",
        client_name: "Alice Johnson",
        requested_by: "Bob Brown",
        created_on: "2024-07-06",
        status: "Closed"
    },
    {
        case_id: "C12347",
        client_leid: "L56791",
        client_name: "Michael White",
        requested_by: "Charlie Black",
        created_on: "2024-07-05",
        status: "Pending"
    }
]
import { LitElement, html } from 'lit';

class ScTableWrapper extends LitElement {
  static properties = {
    headers: { type: Array },
    data: { type: Array }
  };

  constructor() {
    super();
    this.headers = [];
    this.data = [];
  }

  getTransformedData(data) {
    return data.map(item => {
      const transformedItem = { ...item };
      if (transformedItem.id) {
        transformedItem.id = html`<a href="/case/${transformedItem.id}">${transformedItem.id}</a>`;
      }
      return transformedItem;
    });
  }

  render() {
    return html`
      <sc-table
        .headers=${this.headers}
        .data=${this.getTransformedData(this.data)}
      ></sc-table>
    `;
  }
}

customElements.define('sc-table-wrapper', ScTableWrapper);


import { LitElement, html, css } from 'lit';

class FileDownloader extends LitElement {
  static properties = {
    files: { type: Array }
  };

  constructor() {
    super();
    this.files = [];
  }

  handleFileInput(e) {
    this.files = Array.from(e.target.files);
  }

  downloadFiles() {
    this.files.forEach(file => {
      const url = URL.createObjectURL(file);
      const a = document.createElement('a');
      a.href = url;
      a.download = file.name;
      a.click();
      URL.revokeObjectURL(url);
    });
  }

  render() {
    return html`
      <div>
        <input type="file" multiple @change=${this.handleFileInput} />
        <button @click=${this.downloadFiles}>Download Files</button>
      </div>
    `;
  }
}

customElements.define('file-downloader', FileDownloader);
